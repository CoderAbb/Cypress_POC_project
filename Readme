Cypress E-commerce Automation Test Suite
A comprehensive Cypress automation testing project for e-commerce websites with advanced testing scenarios, data-driven tests, and best practices.

🚀 Features
Comprehensive Test Coverage: Homepage, product pages, shopping cart, user registration, checkout process
Advanced Testing Patterns: Data-driven tests, cross-browser testing, responsive design validation
Security Testing: XSS prevention, SQL injection protection, input sanitization
Performance Testing: Page load times, image lazy loading, pagination efficiency
Accessibility Testing: ARIA labels, keyboard navigation, alt text validation
Custom Commands: Reusable commands for common operations
Multiple Test Environments: Support for different environments and configurations

📁 Project Structure
cypress-ecommerce-automation/
├── cypress/
│   ├── e2e/
│   │   ├── ecommerce-tests.cy.js       # Main test suite
│   │   └── advanced-ecommerce-tests.cy.js  # Advanced test scenarios
│   ├── fixtures/
│   │   └── users.json                  # Test data
│   ├── support/
│   │   ├── commands.js                 # Custom commands
│   │   └── e2e.js                      # Support configuration
│   └── videos/                         # Test execution videos
├── cypress.config.js                   # Cypress configuration
├── package.json                        # Dependencies and scripts
└── README.md                          # This file
🛠 Installation

Clone the repository

bash   git clone <repository-url>
   cd cypress-ecommerce-automation

Install dependencies

bash   npm install

Install Cypress

bash   npm install cypress --save-dev
🎯 Usage
Running Tests Interactively
Open Cypress Test Runner for interactive testing:
bashnpm run cy:open
Running Tests in Headless Mode
Run all tests in headless mode:
bashnpm run cy:run
Running Specific Test Suites
bash# Run main e-commerce tests
npm run cy:run:spec cypress/e2e/ecommerce-tests.cy.js

# Run advanced tests
npm run cy:run:spec cypress/e2e/advanced-ecommerce-tests.cy.js

# Run smoke tests (if tagged)
npm run test:smoke

# Run with specific browser
npm run cy:run:chrome
npm run cy:run:firefox
Running Tests with Different Viewports
bash# Mobile viewport
npx cypress run --config viewportWidth=375,viewportHeight=667

# Tablet viewport
npx cypress run --config viewportWidth=768,viewportHeight=1024

# Desktop viewport (default)
npx cypress run --config viewportWidth=1280,viewportHeight=720
🧪 Test Categories
1. Functional Tests

Homepage functionality
Product search and filtering
Shopping cart operations
User registration and login
Checkout process

2. UI/UX Tests

Responsive design validation
Cross-browser compatibility
Accessibility compliance
Form validation

3. Performance Tests

Page load times
Image optimization
API response times
Resource loading efficiency

4. Security Tests

XSS protection
SQL injection prevention
Input sanitization
CSRF protection

5. Edge Cases

Network error handling
Empty states
Invalid URLs
Malformed data

🔧 Configuration
Environment Variables
Create a cypress.env.json file for environment-specific settings:
json{
  "baseUrl": "https://demo.evershop.io",
  "apiUrl": "https://demo.evershop.io/api",
  "testUser": {
    "email": "test@example.com",
    "password": "TestPassword123!"
  },
  "hideXHRInCommandLog": true,
  "retries": 2
}
Browser Configuration
Modify cypress.config.js for browser-specific settings:
javascriptmodule.exports = defineConfig({
  e2e: {
    // Chrome-specific settings
    chromeWebSecurity: false,
    
    // Firefox-specific settings
    firefoxGcInterval: {
      runMode: 1,
      openMode: null
    },
    
    // Edge-specific settings
    userAgent: "Custom User Agent String"
  }
})
📊 Custom Commands
The project includes several custom commands for common operations:
Authentication
javascript// Login with session management
cy.login('user@example.com', 'password')

// Logout
cy.logout()
E-commerce Operations
javascript// Add product to cart
cy.addToCart('.product-item:first')

// Clear shopping cart
cy.clearCart()

// Complete checkout
cy.checkout(userDetails, paymentInfo)
UI Testing
javascript// Test responsive design across viewports
cy.testResponsive()

// Check accessibility compliance
cy.checkA11y()

// Validate form inputs
cy.testFormValidation('form#contact')
Wait Commands
javascript// Wait for content to load
cy.waitForContentLoad('.products')

// Wait for API response
cy.waitForAPI('@getUserData')
📈 Reporting
Built-in Reports

Mochawesome: HTML reports with screenshots
JUnit: XML reports for CI/CD integration
Videos: Automatic video recording of test failures

Generate Reports
bash# Generate HTML report
npx cypress run --reporter mochawesome

# Generate JUnit report
npx cypress run --reporter junit --reporter-options 'mochaFile=results/test-results-[hash].xml'
